precision highp float;

#include "./utils/transform.glslx"

// ------------------------------------------------------------------------------------
// Draw particles to screen

// texture
uniform highp sampler2D u_particles;
uniform float u_particles_res;

// transform
uniform highp vec2 u_scale;
uniform highp vec4 u_offset;
uniform highp mat4 u_matrix;
uniform highp vec2 u_wrap;

// display
uniform vec4 u_color;
uniform float u_size;

// particle index
attribute float a_index;

export void drawVertex() {
  // get particle position from texture data
  highp vec4 pos = texture2D(u_particles, vec2(
      fract(a_index / u_particles_res),
      floor(a_index / u_particles_res) / u_particles_res)
  );
  //vec4 low = vec4(u_scale * pos.xy, 0.0, 0.0);

  highp vec2 clip = ((pos.zw + u_offset.zw) + u_wrap * float(0xFFFF)) + u_offset.xy + pos.xy;
  clip *= u_scale / float(0xFFFF);
  highp vec4 glPos = vec4(2.0 * clip.x - 1.0, 1.0 - clip.y * 2.0, 0.0, 1.0);
  //vec4 high = u_matrix * vec4(pos.zw + u_wrap, 0.0, 1.0);
  //high = vec4(high.xy / high.w, 0.0, 1.0);
  gl_PointSize = u_size;
  gl_Position = glPos; // + low;

  //gl_Position = u_matrix * vec4(pos + u_wrap, 0.0, 1.0);
}

export void drawFragment() {
  gl_FragColor = u_color;
}
