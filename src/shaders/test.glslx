// precision highp float;

// uniform float u_tex_a;
// uniform highp sampler2D u_tex_0;
// uniform highp sampler2D u_tex_1;

// vec2 e(const vec2 a) {
//   vec2 b = mix(texture2D(u_tex_0, a).xy, texture2D(u_tex_1, a).xy, u_tex_a);
//   return vec2(b.x, -b.y);
// }

// vec2 f(vec2 a, mat4 b) {
//   vec4 d = b * vec4(a, 1, 1);
//   return d.xy / d.w;
// }

// uniform mat4 u_hm_to_uv;
// uniform vec2 u_resolution_met;
// uniform float u_time_step;
// uniform float u_drop_off;
// varying vec2 c;
// uniform vec2 u_resolution_tex;
// uniform highp sampler2D u_heatmap;

// const int radius = 3.0;
// const int len = radius * 2.0 + 1.0;
// uniform float u_blur_kernel[len];

// vec4 dispersion(vec2 sample_pos, vec2 tex_res) {
//   vec4 sum = vec4(0.0);
//   for (int x = 0; x < len; x++) {
//     for (int y = 0; y < len; y++) {
//       vec2 tex_pos = sample_pos + vec2(x - rad, y - rad) * tex_res;
//       vec4 tex_val = texture2D(u_heatmap, tex_pos);
//       sum += u_blur_kernel[x] * u_blur_kernel[y] * tex_val;
//     }
//   }
//   return sum;
// }
// void main() {
//   vec2 d = f(c, u_hm_to_uv);
//   vec2 g = e(d);
//   vec2 h = u_time_step * g * u_resolution_met;
//   vec2 a = c - h;
//   vec4 i = dispersion(a, u_resolution_tex);
//   vec2 b = step(a, vec2(0.99999)) * step(vec2(1e-5), a);
//   float j = b.x * b.y;
//   gl_FragColor = vec4(i.rgb * j * u_drop_off, 0.0);
// }
