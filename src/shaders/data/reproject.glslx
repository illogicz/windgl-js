precision highp float;

#include "../utils/proj.glslx"
#include "../utils/transform.glslx"

// UUUUUUUU-UUUUVVVV-VVVVVVVV-11111111 - input
// UUUUUUUU-VVVVVVVV-UUUUUUUU-VVVVVVVV - output
// RRRRRRRR-GGGGGGGG-BBBBBBBB-AAAAAAAA
//
// Not using alpha channel in source PNGs, since it likely will cause headaches
// with premultiplied alpha on different platforms. 12 bits should be good enough.

uniform mat4 u_transform;
uniform mat4 u_transform_inverse;
uniform vec2 u_input_size;
uniform sampler2D u_input;

attribute vec2 a_pos;
varying vec2 v_tex_pos;
const float uvScale = 4096.0;

// Convert RGB to uint UV
vec2 RGBtoUV(const vec4 rgb) {
  vec4 bits = floor(rgb * 255.0 + 0.2);
  // split green channel bits
  float u_lsb4 = floor(bits.g / 16.0);
  float v_msb4 = floor(mod(bits.g, 16.0));
  // combine for UV
  float u = floor(bits.r) * 16.0 + u_lsb4;
  float v = v_msb4 * 256.0 + floor(bits.b);
  // TODO: maybe use same layout per component, each 4 LSBs together in B.
  // simplifies this and allows for some more parallel vectorization.
  // like so: UUUUUUUU-VVVVVVVV-UUUUVVVV-11111111
  return vec2(u, v);
}

export void reprojectVertex() {
  // Interpolate in mercator space
  v_tex_pos = wgs84ToMercator(transform(a_pos, u_transform));
  gl_Position = vec4((a_pos - 0.5) * 2.0, 0, 1);
}

export void reprojectFragment() {
  // convert to degree texture coords
  vec2 deg = mercatorToWGS84(v_tex_pos);
  vec2 tex = transform(deg, u_transform_inverse);

  // Interpolate vertically, width stays fixed
  float h = u_input_size.y; // Not sure I quite understand the offsets,
  float tex_y = tex.y * h - 0.5; // but the results seem spot on.
  vec4 t1 = texture2D(u_input, vec2(tex.x, (floor(tex_y) + 0.5) / h));
  vec4 t2 = texture2D(u_input, vec2(tex.x, (ceil(tex_y) + 0.5) / h));
  // get as 12 bit uints, mix linearly
  vec2 uv = mix(RGBtoUV(t1), RGBtoUV(t2), fract(tex_y));

  // Output to 16 bit float
  gl_FragColor = vec4(uv / (16.0 * 256.0) * 80.0 - 40.0, 0.0, 0.0);
}

/*
// Convert uint UV to RGB
// likely unneeded as we will try to use alpha channel for actual work
// Useful for running tests though.
vec4 UVtoRGB(const vec2 uvf) {
    vec2 uv = floor(uvf + 0.5);
    float n1 = floor(mod(uv.x, 16.0));
    float r = floor(uv.x / 16.0);
    float n2 = floor(uv.y / 256.0);
    float b = floor(mod(uv.y, 256.0));
    float g = n1 * 16.0 + n2;
    return vec4(r, g, b, c_factor) / c_factor;
}
*/
