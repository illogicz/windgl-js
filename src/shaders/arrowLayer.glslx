precision highp float;

const float PI = 3.14159265359;
const float TWO_PI = 6.28318530718;
const float stroke = 0.1;
const vec4 c_stroke = vec4(0.0, 0.0, 0.0, 1.0);

uniform mat4 u_screen_to_coord;
uniform mat4 u_coord_to_uv;
uniform mat4 u_uv_to_coord;
uniform vec2 u_dimensions;

uniform sampler2D u_color_ramp;
uniform float u_color_range;
uniform float u_color_min;

attribute float a_index;
attribute vec2 a_vert;

varying vec2 v_center;
varying float v_size;
varying float v_speed;

#include "./data/sampleUV.glslx"
#include "./utils/transform.glslx"

mat2 rotation(float angle) {
  return mat2(cos(angle), sin(angle),
    -sin(angle), cos(angle));
}

mat3 scale(vec2 _scale) {
  return mat3(1.0 / _scale.x, 0, 0,
    0, 1.0 / _scale.y, 0,
    0, 0, 1);
}

mat3 translate(vec2 _translate) {
  return mat3(1, 0, _translate.x,
    0, 1, _translate.y,
    0, 0, 1);
}

float polygon(vec3 st, int N) {
  float a = atan(st.x, st.y) + PI;
  float r = TWO_PI / float(N);
  float d = cos(floor(0.5 + a / r) * r - a) * length(st.xy);
  return d;
}

export void arrowVertex() {
  vec2 unit = 1.3 / u_dimensions;
  vec2 screen = vec2(
    mod(a_index, u_dimensions.x) + 0.5,
    floor(a_index / u_dimensions.x) + 0.5
  ) / u_dimensions * 2.0 - 1.0;

  // Data boundary offset/wrap
  float min_lon = transform(vec2(0.0), u_uv_to_coord).x;
  vec2 coord = transform(screen, u_screen_to_coord);
  coord.x = fract(coord.x - min_lon) + min_lon;

  vec2 tex_pos = transform(coord, u_coord_to_uv);
  vec2 uv = sampleUV(tex_pos.xy);

  vec2 isb = step(tex_pos, vec2(1.0)) * step(vec2(0.0), tex_pos);
  screen.x += (1.0 - (isb.x * isb.y)) * 100.0;

  float angle = atan(uv.x, uv.y);
  float speed = length(uv);

  v_speed = speed;
  v_size = speed / 40.0;
  v_center = a_vert;

  gl_Position = vec4(screen.xy + rotation(angle + PI) * a_vert * unit, 0.0, 1.0);
}

float arrow(vec3 st, float len, float sc, float pad) {
  return min(
    polygon(st * scale(vec2(sc * 0.3 + pad)), 3),
    polygon(st * translate(vec2(-0.00, len / 2.0 - stroke)) * scale(vec2(sc * 0.2 + pad, sc * len + pad)), 4)
  );
}

const float min_len = 0.2;

export void arrowFragment() {
  vec3 st = vec3(v_center, 1);
  float len = clamp(v_size, min_len, 1.0);
  float scl = clamp(v_size / min_len, 0.0, 1.0);

  vec3 pos = st * translate(vec2(0, -len * scl));

  float d = arrow(pos, len * 2.0, scl, 0.0);
  float d2 = arrow(pos, len * 2.0, scl, stroke);

  float pi = 0.3;
  float po = pi + stroke;
  float p_fill = 1.0 - smoothstep(pi, po, d);
  float p_stroke = 1.0 - smoothstep(pi, po, d2);

  vec2 ramp_pos = vec2((v_speed - u_color_min) / u_color_range, 0.5);
  vec4 c_fill = texture2D(u_color_ramp, ramp_pos);
  gl_FragColor = c_fill * p_fill + c_stroke * p_stroke;
}
